<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 实验一 [重要]创建bean -->
    <!-- bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件是什么 -->
    <!-- id属性：当前bean的唯一标识，设定了这个唯一标识后，在其他地方就可以来引用这个bean -->
    <!-- class属性：指定这个bean要配置的组件的全类名 -->
    <bean id="happyComponent1" class="com.stonebridge.domain.HappyComponent"/>

    <!-- 实验二 [重要]获取bean -->
    <bean id="happyComponent2" class="com.stonebridge.domain.HappyComponent"/>

    <!-- 实验三 [重要]给bean的属性赋值：setter注入 -->
    <bean id="happyComponent3" class="com.stonebridge.domain.HappyComponent">

        <!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 -->
        <!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） -->
        <!-- value属性：指定属性值 -->
        <property name="name" value="i am very happy"/>
    </bean>
    <bean id="happyMachine" class="com.stonebridge.domain.HappyMachine">
        <property name="machineName" value="makeHappy"/>
    </bean>
    <bean id="happyComponent4" class="com.stonebridge.domain.HappyComponent">
        <!-- 使用外部已经配置好的happyMachine这个bean来给当前组件的happyMachine属性赋值 -->
        <!-- 引用另外一个bean不能再使用value属性，而要使用ref属性指定bean的id -->
        <!--
            如果错把ref属性写成了value属性，会抛出异常：
            Caused by: java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'com.atguigu.ioc.component.HappyMachine' for property 'happyMachine': no matching editors or conversion strategy found
            意思是不能把String类型转换成我们要的HappyMachine类型
            说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值
        -->
        <property name="machine" ref="happyMachine"/>
    </bean>
    <!-- 实验五 [重要]给bean的属性赋值：内部bean -->
    <bean id="happyComponent5" class="com.stonebridge.domain.HappyComponent">
        <property name="machine">
            <!-- 在property标签内部再配置一个bean，这就是内部bean -->
            <!-- 内部bean可以直接用来给property指定的属性赋值 -->
            <!-- 由于内部bean仅限于在bean内部使用，所以可以不配置id属性 -->
            <bean class="com.stonebridge.domain.HappyMachine">
                <property name="machineName" value="makeHappy"/>
            </bean>
        </property>
    </bean>
    <!-- 引入外部属性文件 -->
    <!-- 使用context名称空间下的property-placeholder标签引入外部属性文件(本质上就是记录外部属性文件的位置) -->
    <!-- location属性：指定外部属性文件的路径。classpath:表示这个路径从类路径根目录开始 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 实验七 给bean的属性赋值：级联属性赋值 -->
    <bean id="happyComponent7" class="com.stonebridge.domain.HappyComponent">
        <!-- 使用内部bean的形式将happyMachine属性初始化 -->
        <property name="machine">
            <!-- 相当于创建了HappyMachine的空对象赋值给happyMachine属性 -->
            <bean class="com.stonebridge.domain.HappyMachine"/>
        </property>
        <!--
            如果happyMachine属性没有被初始化，那么直接访问级联属性会抛出异常：
            Caused by: org.springframework.beans.NullValueInNestedPathException: Invalid property 'happyMachine' of bean class [com.atguigu.ioc.component.HappyComponent]: Value of nested property 'happyMachine' is null
        -->
        <property name="machine.machineName" value="aaa"/>
    </bean>
    <bean id="happyTeam" class="com.stonebridge.domain.HappyTeam">
        <!-- 调用类的构造器创建对象并同时传入参数值 -->
        <!-- constructor-arg标签：给构造器对应位置传入参数 -->
        <!-- index属性：指定当前参数在参数列表中的索引位置 -->
        <!-- name属性：指定当前参数的参数名 -->
        <!-- value属性：指定参数值 -->
        <constructor-arg name="teamName" value="gaysTeam"/>
        <constructor-arg name="memberCount" value="10"/>
        <constructor-arg name="memberSalary" value="555.55"/>
    </bean>
</beans>